/**
 * Customers Service Api Documentation
 * Documentation automatically generated
 *
 * OpenAPI spec version: 1.5.3
 * Contact: run2obtain@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


package io.swagger.server.api

import io.swagger.server.model.PetDetails
import io.swagger.server.model.PetRequest
import io.swagger.server.model.PetType

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class PetResourceApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "PetResourceApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val findPetUsingGETOperation = (apiOperation[PetDetails]("findPetUsingGET")
      summary "findPet"
      parameters(pathParam[Int]("petId").description(""))
  )

  get("/owners/*/pets/:petId",operation(findPetUsingGETOperation)) {
    
    
      val petId = params.getOrElse("petId", halt(400))
    
    println("petId: " + petId)
  }

  

  val getPetTypesUsingGETOperation = (apiOperation[List[PetType]]("getPetTypesUsingGET")
      summary "getPetTypes"
      parameters()
  )

  get("/petTypes",operation(getPetTypesUsingGETOperation)) {
  }

  

  val processCreationFormUsingPOSTOperation = (apiOperation[Unit]("processCreationFormUsingPOST")
      summary "processCreationForm"
      parameters(bodyParam[PetRequest]("petRequest").description(""), pathParam[Int]("ownerId").description(""))
  )

  post("/owners/:ownerId/pets",operation(processCreationFormUsingPOSTOperation)) {
    
    
          val petRequest = parsedBody.extract[PetRequest]

    println("petRequest: " + petRequest)
    
    
      val ownerId = params.getOrElse("ownerId", halt(400))
    
    println("ownerId: " + ownerId)
  }

  

  val processUpdateFormUsingPUTOperation = (apiOperation[Unit]("processUpdateFormUsingPUT")
      summary "processUpdateForm"
      parameters(bodyParam[PetRequest]("petRequest").description(""))
  )

  put("/owners/*/pets/:petId",operation(processUpdateFormUsingPUTOperation)) {
    
    
          val petRequest = parsedBody.extract[PetRequest]

    println("petRequest: " + petRequest)
  }

}
