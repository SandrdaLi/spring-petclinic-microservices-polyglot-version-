/**
 * Customers Service Api Documentation
 * Documentation automatically generated
 *
 * OpenAPI spec version: 1.5.3
 * Contact: run2obtain@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


package io.swagger.server.api

import io.swagger.server.model.Owner

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class OwnerResourceApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OwnerResourceApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createOwnerUsingPOSTOperation = (apiOperation[Unit]("createOwnerUsingPOST")
      summary "createOwner"
      parameters(bodyParam[Owner]("owner").description(""))
  )

  post("/owners",operation(createOwnerUsingPOSTOperation)) {
    
    
          val owner = parsedBody.extract[Owner]

    println("owner: " + owner)
  }

  

  val findAllUsingGETOperation = (apiOperation[List[Owner]]("findAllUsingGET")
      summary "findAll"
      parameters()
  )

  get("/owners",operation(findAllUsingGETOperation)) {
  }

  

  val findOwnerUsingGETOperation = (apiOperation[Owner]("findOwnerUsingGET")
      summary "findOwner"
      parameters(pathParam[Int]("ownerId").description(""))
  )

  get("/owners/:ownerId",operation(findOwnerUsingGETOperation)) {
    
    
      val ownerId = params.getOrElse("ownerId", halt(400))
    
    println("ownerId: " + ownerId)
  }

  

  val updateOwnerUsingPUTOperation = (apiOperation[Owner]("updateOwnerUsingPUT")
      summary "updateOwner"
      parameters(pathParam[Int]("ownerId").description(""), bodyParam[Owner]("ownerRequest").description(""))
  )

  put("/owners/:ownerId",operation(updateOwnerUsingPUTOperation)) {
    
    
      val ownerId = params.getOrElse("ownerId", halt(400))
    
    println("ownerId: " + ownerId)
    
    
          val ownerRequest = parsedBody.extract[Owner]

    println("ownerRequest: " + ownerRequest)
  }

}
